{
    "$schema": "http://json-schema.org/draft-07/schema",
    "$id": "https://raw.githubusercontent.com/nf-core/funcscan/master/nextflow_schema.json",
    "title": "nf-core/funcscan pipeline parameters",
    "description": "Pipeline for screening for functional components of assembled contigs",
    "type": "object",
    "definitions": {
        "screening_subworkflow_activation": {
            "title": "Screening Subworkflow Activation",
            "type": "object",
            "description": "",
            "default": "",
            "properties": {
                "run_annotation_tool": {
                    "type": "string",
                    "default": "prodigal",
                    "description": "Assign which annotation tool to run either prodigal or prokka",
                    "enum": ["prodigal", "prokka"]
                },
                "run_amp_screening": {
                    "type": "boolean"
                },
                "run_arg_screening": {
                    "type": "boolean"
                },
                "run_bgc_screening": {
                    "type": "boolean"
                }
            }
        },
        "input_output_options": {
            "title": "Input/output options",
            "type": "object",
            "fa_icon": "fas fa-terminal",
            "description": "Define where the pipeline should find input data and save output data.",
            "required": ["input", "outdir"],
            "properties": {
                "input": {
                    "type": "string",
                    "format": "file-path",
                    "mimetype": "text/csv",
                    "pattern": "^\\S+\\.csv$",
                    "schema": "assets/schema_input.json",
                    "description": "Path to comma-separated file containing information sample names and paths to corresponding FASTA files.",
                    "help_text": "Before running the pipeline, you will need to create a design file with information about the samples to be scanned by `funcscan`, containing `sample name` and `path/to/your/contigs.fasta`. Use this parameter to specify its location. It has to be a comma-separated file with 2 columns, and a header row (`sample, fasta`). See [usage docs](https://nf-co.re/funcscan/usage#samplesheet-input).",
                    "fa_icon": "fas fa-file-csv"
                },
                "outdir": {
                    "type": "string",
                    "format": "directory-path",
                    "description": "The output directory where the results will be saved. You have to use absolute paths to storage on Cloud infrastructure.",
                    "fa_icon": "fas fa-folder-open"
                },
                "email": {
                    "type": "string",
                    "description": "Email address for completion summary.",
                    "fa_icon": "fas fa-envelope",
                    "help_text": "Set this parameter to your e-mail address to get a summary e-mail with details of the run sent to you when the workflow exits. If set in your user config file (`~/.nextflow/config`) then you don't need to specify this on the command line for every run.",
                    "pattern": "^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$"
                },
                "multiqc_title": {
                    "type": "string",
                    "description": "MultiQC report title. Printed as page header, used for filename if not otherwise specified.",
                    "fa_icon": "fas fa-file-signature"
                }
            },
            "help_text": ""
        },
        "bgc_antismash": {
            "title": "BGC_antiSMASH",
            "type": "object",
            "description": "",
            "default": "",
            "properties": {
                "bgc_skip_antismash": {
                    "type": "boolean"
                },
                "bgc_antismash_databases": {
                    "type": "string",
                    "description": "Path to user-defined antiSMASH database",
                    "default": "None"
                },
                "bgc_antismash_directory": {
                    "type": "string",
                    "description": "Path to user-defined antiSMASH directory",
                    "default": "None"
                }
            }
        },
        "screening_type_activation": {
            "title": "Screening Type Activation",
            "type": "object",
            "description": "",
            "default": "",
            "properties": {
                "run_amp_screening": {
                    "type": "boolean",
                    "description": "Activate antimicrobial peptide screening tools",
                    "fa_icon": "fas fa-check-circle"
                },
                "run_arg_screening": {
                    "type": "boolean",
                    "description": "Activate antimicrobial resistance gene screening tools",
                    "fa_icon": "fas fa-check-circle"
                }
            },
            "fa_icon": "fas fa-network-wired"
        },
        "annotation": {
            "title": "Annotation",
            "type": "object",
            "description": "These options influence the generation of annotation files required for downstream steps in ARG and AMP workflows.",
            "default": "",
            "properties": {
                "run_annotation_tool": {
                    "type": "string",
                    "default": "prodigal",
                    "description": "Specify which annotation tool to run either prodigal or prokka",
                    "enum": ["prodigal", "prokka"],
                    "fa_icon": "fas fa-edit"
                },
                "prodigal_output_format": {
                    "type": "string",
                    "default": "gff",
                    "description": "Specify annotation output format. Options: gff, gbk, sqn, sco",
                    "fa_icon": "fas fa-file-import",
                    "enum": ["gff", "gbk", "sqn", "sco"]
                }
            },
            "fa_icon": "fas fa-file-signature"
        },
        "amp_amplify": {
            "title": "AMP: AMPlify",
            "type": "object",
            "description": "Antimicrobial Peptide detection using a deep learning model",
            "default": "",
            "properties": {
                "amp_skip_amplify": {
                    "type": "boolean",
                    "description": "Skip AMPlify during AMP-screening",
                    "fa_icon": "fas fa-ban"
                }
            },
            "fa_icon": "fas fa-tools",
            "help_text": "AMPlify is an attentive deep learning model for antimicrobial peptide prediction. It takes in annotated contigs (.faa) and classifies them as either AMP or non-AMP.\n\nDocumentation: https://github.com/bcgsc/AMPlify"
        },
        "amp_ampir": {
            "title": "AMP: ampir",
            "type": "object",
            "description": "Antimicrobial Peptide detection using machine learning",
            "default": "",
            "properties": {
                "amp_skip_ampir": {
                    "type": "boolean",
                    "description": "Skip AMPir during AMP-screening",
                    "fa_icon": "fas fa-ban"
                },
                "amp_ampir_model": {
                    "type": "string",
                    "default": "precursor",
                    "description": "Specify which machine learning classification model to use",
                    "help_text": "AMPir uses a supervised statistical machine learning approach to predict AMPs. It incorporates two support vector machine classification models, \u201cprecursor\u201d and \u201cmature\u201d. The default model, \u201cprecursor\u201d is best suited for full length proteins and the \u201cmature\u201d model is best suited for small mature proteins (<60 amino acids). AMPpir also accepts custom (user trained) models based on the caret package.\n\n> Modifies AMPir parameter: `model =`",
                    "enum": ["precursor", "mature"],
                    "fa_icon": "fas fa-layer-group"
                },
                "amp_ampir_minlength": {
                    "type": "integer",
                    "default": 10,
                    "description": "Specify minimum protein length for prediction calculation",
                    "help_text": "Filters result for minimum protein length.\nNote that amino acid sequences that are shorter than 10 amino acids long and/or contain anything other than the standard 20 amino acids are not evaluated and will contain an NA as their prob_AMP value\n\n> Modifies AMPir parameter: `min_length` in the `calculate_features()` function",
                    "fa_icon": "fas fa-ruler-horizontal"
                },
                "amp_ampir_minprobability": {
                    "type": "number",
                    "default": 0.8,
                    "description": "Specify predicted probability value to filter for",
                    "help_text": "Filters results based on calculated probability stored in data frame columns `prob_AMP`.\nNote that amino acid sequences that are shorter than 10 amino acids long and/or contain anything other than the standard 20 amino acids are not evaluated and will contain an `NA` as their prob_AMP value.\n\n> Modifies AMPir parameter: `prob_AMP`",
                    "fa_icon": "fas fa-dice"
                }
            },
            "fa_icon": "fas fa-tools",
            "help_text": "ampir (antimicrobial peptide prediction in r) is an r package designed to predict antimicrobial peptides (AMPs) from any given size protein dataset. ampir uses a supervised statistical machine learning approach to predict AMPs. It incorporates two support vector machine classification models, \u201cprecursor\u201d and \u201cmature\u201d that have been trained on publicly available antimicrobial peptide data.\n\nDocumentation: https://github.com/Legana/ampir"
        },
        "amp_hmmsearch": {
            "title": "AMP: HMMSearch",
            "type": "object",
            "description": "Antimicrobial Peptide detection based on predefined HMM models",
            "default": "",
            "properties": {
                "amp_skip_hmmsearch": {
                    "type": "boolean",
                    "description": "Skip HMMsearch during AMP-screening",
                    "fa_icon": "fas fa-ban"
                },
                "amp_hmmsearch_models": {
                    "type": "string",
                    "default": "None",
                    "description": "Specify path (with wildcard) to AMP hmm models  to searching against",
                    "help_text": "HMMSearch performs biosequence analysis using profile hidden Markov Models.\nThe models are specified in`.hmm` files that are specified with this parameter\n\ne.g. \n\n```\n--amp_hmmsearch_models '/<path>/<to>/<models>/*.hmm'\n```\n",
                    "fa_icon": "fas fa-layer-group"
                },
                "amp_hmmsearch_savealignments": {
                    "type": "boolean",
                    "help_text": "Save a multiple alignment of all significant hits (those satisfying inclusion thresholds) to a file\n\n> Modifies HMMsearch parameter: `-A`",
                    "description": "Saves a multiple alignment of all significant hits to the file",
                    "fa_icon": "far fa-save"
                },
                "amp_hmmsearch_savetargets": {
                    "type": "boolean",
                    "help_text": "Save a simple tabular (space-delimited) file summarizing the per-target output, with one data line per homologous target sequence found.\n\n> Modifies HMMsearch parameter: `--tblout`",
                    "description": "Saves a simple tabular file summarising the per-target output",
                    "fa_icon": "far fa-save"
                },
                "amp_hmmsearch_savedomains": {
                    "type": "boolean",
                    "help_text": "Save a simple tabular (space-delimited) file summarizing the per-domain output, with one data line per homologous domain detected in a query sequence for each homologous model.\n\n> Modifies HMMsearch parameter: `--domtblout`",
                    "description": "Save a simple tabular file summarising the per-domain output",
                    "fa_icon": "far fa-save"
                }
            },
            "fa_icon": "fas fa-tools",
            "help_text": "HMMER/hmmsearch is used for searching sequence databases for sequence homologs, and for making sequence alignments. It implements methods using probabilistic models called profile hidden Markov models (profile HMMs). `hmmsearch` is used to search one or more profiles against a sequence database.\n\nDocumentation: http://hmmer.org"
        },
        "amp_macrel": {
            "title": "AMP: Macrel",
            "type": "object",
            "description": "Antimicrobial Peptide detection mining from metagenomes",
            "default": "",
            "properties": {
                "amp_skip_macrel": {
                    "type": "boolean",
                    "description": "Skip Macrel during AMP-screening",
                    "fa_icon": "fas fa-ban"
                }
            },
            "fa_icon": "fas fa-tools",
            "help_text": "Macrel is a tool that mines antimicrobial peptides (AMPs) from (meta)genomes by predicting peptides from genomes (provided as contigs) and outputs all the predicted anti-microbial peptides found.\n\nDocumentation: https://github.com/BigDataBiology/macrel"
        },
        "arg_deeparg": {
            "title": "ARG: DeepARG",
            "type": "object",
            "description": "Antimicrobial resistance gene detection using a deep learning model",
            "default": "",
            "properties": {
                "arg_skip_deeparg": {
                    "type": "boolean",
                    "description": "Skip DeepARG during the ARG-screening",
                    "fa_icon": "fas fa-ban"
                },
                "arg_deeparg_data": {
                    "type": "string",
                    "default": "None",
                    "fa_icon": "fab fa-deezer",
                    "description": "Specify the path to the DeepARG database",
                    "help_text": "Specify the path to a local version of the DeepARG database (see the pipelines' [usage documentation](https://nf-co.re/funcscan/usage)). If no input is given, the module will download the database for you, however this is not recommended, as the database is large and this will take time."
                },
                "arg_deeparg_data_version": {
                    "type": "integer",
                    "default": 2,
                    "description": "Specify the numeric version number of a user supplied DeepaRG database",
                    "fa_icon": "fas fa-code-branch",
                    "help_text": "The DeepARG tool itself does not report explicit the database version it uses. We assume the latest version (as downloaded by the tool's database download module), however if you supply a different database, you must supply the version with this parameter for use with the downstream hAMRonization tool. \n\nThe version number must be without any leading `v` etc."
                },
                "arg_deeparg_model": {
                    "type": "string",
                    "default": "LS",
                    "enum": ["LS", "SS"],
                    "description": "Specify which model to use (short or long sequences). Options: SS, LS)",
                    "help_text": "Specify which model to use: short sequences for reads (`SS`) | long sequences for genes (`LS`). In the vast majority of cases we recommend using the `LS` model when using funcscan\n\n> Modifies DeepARG parameter: `--model`",
                    "fa_icon": "fas fa-layer-group"
                },
                "arg_deeparg_minprob": {
                    "type": "number",
                    "default": 0.8,
                    "description": "Specify minimum probability cutoff",
                    "help_text": "Sets the minimum probability cutoff below which hits are discarded, default is 0.8\n\n> Modifies DeepARG parameter: `--min-prob`\n\n",
                    "fa_icon": "fas fa-dice"
                },
                "arg_deeparg_alignmentevalue": {
                    "type": "number",
                    "default": 1e-10,
                    "description": "Specify Evalue cutoff",
                    "help_text": "Sets the cutoff value for Evalue below which hits are discarded\n\n> Modifies DeepARG parameter: `--arg-alignment-evalue`",
                    "fa_icon": "fas fa-align-center"
                },
                "arg_deeparg_alignmentidentity": {
                    "type": "integer",
                    "default": 50,
                    "description": "Specify percent identity cutoff for sequence alignment",
                    "help_text": "Sets the value for Identity cutoff for sequence alignment\n\n> Modifies DeepARG parameter: `--arg-alignment-identity`",
                    "fa_icon": "fas fa-align-center"
                },
                "arg_deeparg_alignmentoverlap": {
                    "type": "number",
                    "default": 0.8,
                    "description": "Specify alignment read overlap",
                    "help_text": "Sets the value for the allowed alignment read overlap.\n\n> Modifies DeepARG parameter: `--arg-alignment-overlap`",
                    "fa_icon": "fas fa-align-center"
                },
                "arg_deeparg_numalignmentsperentry": {
                    "type": "integer",
                    "default": 1000,
                    "description": "Specify minimum number of alignments per entry for DIAMOND step of DeepARG",
                    "help_text": "Sets the value of minimum number of alignments per entry for Diamond.\n\n> Modifies DeepARG parameter: `--arg-num-alignments-per-entry`",
                    "fa_icon": "far fa-gem"
                }
            },
            "fa_icon": "fas fa-tools",
            "help_text": "deepARG uses deep learning to characterize and annotate antibiotic resistance genes in metagenomes. It is composed of two models for two types of input: short sequence reads and gene-like sequences. In this pipeline we use the `ls` model, which is suitable for annotating full sequence genes and to discover novel antibiotic resistance genes from assembled samples. The tool `Diamond` is used as an aligner.\n\nDocumentation: https://bitbucket.org/gusphdproj/deeparg-ss/src/master/"
        },
        "arg_fargene": {
            "title": "ARG: fARGene",
            "type": "object",
            "description": "Antimicrobial resistance gene detection using a deep learning model",
            "default": "",
            "help_text": "fARGene (Fragmented Antibiotic Resistance Gene Identifier) is a tool that takes either fragmented metagenomic data or longer sequences as input and predicts and delivers full-length antiobiotic resistance genes as output. The tool includes developed and optimized models for a number or resistance gene types, and the functionality to create and optimize models of your own choice of resistance genes. \nDocumentation:  https://github.com/fannyhb/fargene",
            "properties": {
                "arg_skip_fargene": {
                    "type": "boolean",
                    "description": "Skip fARGene during the ARG-screening",
                    "fa_icon": "fas fa-ban"
                },
                "arg_fargene_hmmmodel": {
                    "type": "string",
                    "default": "class_a,class_b_1_2,class_b_3,class_c,class_d_1,class_d_2,qnr,tet_efflux,tet_rpg,tet_enzyme",
                    "description": "Specify comma-separated list of which pre-defined HMM models to screen against",
                    "help_text": "Specify via a comma separated list any of the hmm-models of the pre-defined models:\n    - Class A beta-lactamases: `class_a`\n    - Subclass B1 and B2 beta-lactamases: `class_b_1_2`\n    - Subclass B3 beta-lactamases: `class_b_3`\n    - Class C beta-lactamases: `class_c\n    - Class D beta-lactamases: `class_d_1`, `class_d_2`\n    - qnr: `qnr`\n    - Tetracycline resistance genes `tet_efflux`, `tet_rpg`, `tet_enzyme`\n\n> Modifies fARGene parameter: `--hmm-model`",
                    "fa_icon": "fas fa-layer-group"
                }
            },
            "fa_icon": "fas fa-tools"
        },
        "arg_rgi": {
            "title": "ARG: RGI",
            "type": "object",
            "description": "Antimicrobial resistance gene detection, based on alignment to the CARD database",
            "default": "",
            "help_text": "RGI (Resistance Gene Identifier) predicts resistome(s) from protein or nucleotide data based on homology and SNP models. It uses reference data from the Comprehensive Antibiotic Resistance Database (CARD).\n\nDocumentation: https://github.com/arpcard/rgi",
            "properties": {
                "arg_skip_rgi": {
                    "type": "boolean",
                    "description": "Skip RGI during the ARG-screening",
                    "fa_icon": "fas fa-ban"
                }
            },
            "fa_icon": "fas fa-tools"
        },
        "reporting": {
            "title": "Reporting",
            "type": "object",
            "description": "",
            "default": "",
            "properties": {
                "arg_hamronization_summarizeformat": {
                    "type": "string",
                    "default": "interactive",
                    "enum": ["interactive", "tsv", "json"],
                    "help_text": "Specifies which summary report format to generate with `hamronize summarize`: tsv, json or interactive (html)\n\n> Modifies hAMRonization parameter: `-t`, `--summary_type`",
                    "description": "Specifies summary output format",
                    "fa_icon": "far fa-file-code"
                }
            },
            "fa_icon": "fas fa-file-import",
            "help_text": ""
        },
        "reference_genome_options": {
            "title": "Reference genome options",
            "type": "object",
            "fa_icon": "fas fa-dna",
            "description": "Reference genome related files and options required for the workflow.",
            "properties": {
                "genome": {
                    "type": "string",
                    "description": "Name of iGenomes reference.",
                    "fa_icon": "fas fa-book",
                    "help_text": "If using a reference genome configured in the pipeline using iGenomes, use this parameter to give the ID for the reference. This is then used to build the full paths for all required reference genome files e.g. `--genome GRCh38`. \n\nSee the [nf-core website docs](https://nf-co.re/usage/reference_genomes) for more details.",
                    "hidden": true
                },
                "fasta": {
                    "type": "string",
                    "format": "file-path",
                    "mimetype": "text/plain",
                    "pattern": "^\\S+\\.fn?a(sta)?(\\.gz)?$",
                    "description": "Path to FASTA genome file.",
                    "help_text": "This parameter is *mandatory* if `--genome` is not specified. If you don't have a BWA index available this will be generated for you automatically. Combine with `--save_reference` to save BWA index for future runs.",
                    "fa_icon": "far fa-file-code",
                    "hidden": true
                },
                "igenomes_base": {
                    "type": "string",
                    "format": "directory-path",
                    "description": "Directory / URL base for iGenomes references.",
                    "default": "s3://ngi-igenomes/igenomes",
                    "fa_icon": "fas fa-cloud-download-alt",
                    "hidden": true
                },
                "igenomes_ignore": {
                    "type": "boolean",
                    "description": "Do not load the iGenomes reference config.",
                    "fa_icon": "fas fa-ban",
                    "help_text": "Do not load `igenomes.config` when running the pipeline. You may choose this option if you observe clashes between custom parameters and those supplied in `igenomes.config`.",
                    "hidden": true
                }
            }
        },
        "institutional_config_options": {
            "title": "Institutional config options",
            "type": "object",
            "fa_icon": "fas fa-university",
            "description": "Parameters used to describe centralised config profiles. These should not be edited.",
            "help_text": "The centralised nf-core configuration profiles use a handful of pipeline parameters to describe themselves. This information is then printed to the Nextflow log when you run a pipeline. You should not need to change these values when you run a pipeline.",
            "properties": {
                "custom_config_version": {
                    "type": "string",
                    "description": "Git commit id for Institutional configs.",
                    "default": "master",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog"
                },
                "custom_config_base": {
                    "type": "string",
                    "description": "Base directory for Institutional configs.",
                    "default": "https://raw.githubusercontent.com/nf-core/configs/master",
                    "hidden": true,
                    "help_text": "If you're running offline, Nextflow will not be able to fetch the institutional config files from the internet. If you don't need them, then this is not a problem. If you do need them, you should download the files from the repo and tell Nextflow where to find them with this parameter.",
                    "fa_icon": "fas fa-users-cog"
                },
                "config_profile_name": {
                    "type": "string",
                    "description": "Institutional config name.",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog"
                },
                "config_profile_description": {
                    "type": "string",
                    "description": "Institutional config description.",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog"
                },
                "config_profile_contact": {
                    "type": "string",
                    "description": "Institutional config contact information.",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog"
                },
                "config_profile_url": {
                    "type": "string",
                    "description": "Institutional config URL link.",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog"
                }
            }
        },
        "max_job_request_options": {
            "title": "Max job request options",
            "type": "object",
            "fa_icon": "fab fa-acquisitions-incorporated",
            "description": "Set the top limit for requested resources for any single job.",
            "help_text": "If you are running on a smaller system, a pipeline step requesting more resources than are available may cause the Nextflow to stop the run with an error. These options allow you to cap the maximum resources requested by any single job so that the pipeline will run on your system.\n\nNote that you can not _increase_ the resources requested by any job using these options. For that you will need your own configuration file. See [the nf-core website](https://nf-co.re/usage/configuration) for details.",
            "properties": {
                "max_cpus": {
                    "type": "integer",
                    "description": "Maximum number of CPUs that can be requested for any single job.",
                    "default": 16,
                    "fa_icon": "fas fa-microchip",
                    "hidden": true,
                    "help_text": "Use to set an upper-limit for the CPU requirement for each process. Should be an integer e.g. `--max_cpus 1`"
                },
                "max_memory": {
                    "type": "string",
                    "description": "Maximum amount of memory that can be requested for any single job.",
                    "default": "128.GB",
                    "fa_icon": "fas fa-memory",
                    "pattern": "^\\d+(\\.\\d+)?\\.?\\s*(K|M|G|T)?B$",
                    "hidden": true,
                    "help_text": "Use to set an upper-limit for the memory requirement for each process. Should be a string in the format integer-unit e.g. `--max_memory '8.GB'`"
                },
                "max_time": {
                    "type": "string",
                    "description": "Maximum amount of time that can be requested for any single job.",
                    "default": "240.h",
                    "fa_icon": "far fa-clock",
                    "pattern": "^(\\d+\\.?\\s*(s|m|h|day)\\s*)+$",
                    "hidden": true,
                    "help_text": "Use to set an upper-limit for the time requirement for each process. Should be a string in the format integer-unit e.g. `--max_time '2.h'`"
                }
            }
        },
        "generic_options": {
            "title": "Generic options",
            "type": "object",
            "fa_icon": "fas fa-file-import",
            "description": "Less common options for the pipeline, typically set in a config file.",
            "help_text": "These options are common to all nf-core pipelines and allow you to customise some of the core preferences for how the pipeline runs.\n\nTypically these options would be set in a Nextflow config file loaded for all pipeline runs, such as `~/.nextflow/config`.",
            "properties": {
                "help": {
                    "type": "boolean",
                    "description": "Display help text.",
                    "fa_icon": "fas fa-question-circle",
                    "hidden": true
                },
                "publish_dir_mode": {
                    "type": "string",
                    "default": "copy",
                    "description": "Method used to save pipeline results to output directory.",
                    "help_text": "The Nextflow `publishDir` option specifies which intermediate files should be saved to the output directory. This option tells the pipeline what method should be used to move these files. See [Nextflow docs](https://www.nextflow.io/docs/latest/process.html#publishdir) for details.",
                    "fa_icon": "fas fa-copy",
                    "enum": ["symlink", "rellink", "link", "copy", "copyNoFollow", "move"],
                    "hidden": true
                },
                "email_on_fail": {
                    "type": "string",
                    "description": "Email address for completion summary, only when pipeline fails.",
                    "fa_icon": "fas fa-exclamation-triangle",
                    "pattern": "^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$",
                    "help_text": "An email address to send a summary email to when the pipeline is completed - ONLY sent if the pipeline does not exit successfully.",
                    "hidden": true
                },
                "plaintext_email": {
                    "type": "boolean",
                    "description": "Send plain-text email instead of HTML.",
                    "fa_icon": "fas fa-remove-format",
                    "hidden": true
                },
                "max_multiqc_email_size": {
                    "type": "string",
                    "description": "File size limit when attaching MultiQC reports to summary emails.",
                    "pattern": "^\\d+(\\.\\d+)?\\.?\\s*(K|M|G|T)?B$",
                    "default": "25.MB",
                    "fa_icon": "fas fa-file-upload",
                    "hidden": true
                },
                "monochrome_logs": {
                    "type": "boolean",
                    "description": "Do not use coloured log outputs.",
                    "fa_icon": "fas fa-palette",
                    "hidden": true
                },
                "multiqc_config": {
                    "type": "string",
                    "description": "Custom config file to supply to MultiQC.",
                    "fa_icon": "fas fa-cog",
                    "hidden": true
                },
                "tracedir": {
                    "type": "string",
                    "description": "Directory to keep pipeline Nextflow logs and reports.",
                    "default": "${params.outdir}/pipeline_info",
                    "fa_icon": "fas fa-cogs",
                    "hidden": true
                },
                "validate_params": {
                    "type": "boolean",
                    "description": "Boolean whether to validate parameters against the schema at runtime",
                    "default": true,
                    "fa_icon": "fas fa-check-square",
                    "hidden": true
                },
                "show_hidden_params": {
                    "type": "boolean",
                    "fa_icon": "far fa-eye-slash",
                    "description": "Show all params when using `--help`",
                    "hidden": true,
                    "help_text": "By default, parameters set as _hidden_ in the schema are not shown on the command line when a user runs with `--help`. Specifying this option will tell the pipeline to show all parameters."
                },
                "enable_conda": {
                    "type": "boolean",
                    "description": "Run this workflow with Conda. You can also use '-profile conda' instead of providing this parameter.",
                    "hidden": true,
                    "fa_icon": "fas fa-bacon"
                }
            }
        }
    },
    "allOf": [
        {
            "$ref": "#/definitions/input_output_options"
        },
        {
            "$ref": "#/definitions/screening_type_activation"
        },
        {
            "$ref": "#/definitions/annotation"
        },
        {
            "$ref": "#/definitions/amp_amplify"
        },
        {
            "$ref": "#/definitions/amp_ampir"
        },
        {
            "$ref": "#/definitions/amp_hmmsearch"
        },
        {
            "$ref": "#/definitions/amp_macrel"
        },
        {
            "$ref": "#/definitions/arg_deeparg"
        },
        {
            "$ref": "#/definitions/arg_fargene"
        },
        {
            "$ref": "#/definitions/arg_rgi"
        },
        {
            "$ref": "#/definitions/bgc_antismash"
        },
        {
            "$ref": "#/definitions/reporting"
        },
        {
            "$ref": "#/definitions/reference_genome_options"
        },
        {
            "$ref": "#/definitions/institutional_config_options"
        },
        {
            "$ref": "#/definitions/max_job_request_options"
        },
        {
            "$ref": "#/definitions/generic_options"
        }
    ]
}
